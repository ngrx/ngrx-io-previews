{"version":3,"sources":["./node_modules/@angular/cdk/__ivy_ngcc__/fesm5/portal.js","./node_modules/@angular/cdk/__ivy_ngcc__/fesm5/accordion.js","./node_modules/@angular/material/__ivy_ngcc__/fesm5/expansion.js","./src/app/custom-elements/expandable-section/expandable-section.component.ts","./src/app/custom-elements/expandable-section/expandable-section.component.html","./src/app/custom-elements/expandable-section/expandable-section.module.ts"],"names":["throwPortalAlreadyAttachedError","Error","Portal","prototype","attach","host","throwNullPortalOutletError","hasAttached","this","_attachedHost","detach","throwNoPortalAttachedError","Object","defineProperty","get","enumerable","configurable","setAttachedHost","ComponentPortal","_super","component","viewContainerRef","injector","componentFactoryResolver","_this","call","TemplatePortal","template","context","templateRef","elementRef","undefined","DomPortal","element","nativeElement","BasePortalOutlet","_isDisposed","attachDomPortal","_attachedPortal","portal","throwNullPortalError","throwPortalOutletAlreadyDisposedError","attachComponentPortal","attachTemplatePortal","throwUnknownPortalTypeError","_invokeDisposeFn","dispose","setDisposeFn","fn","_disposeFn","DomPortalOutlet","outletElement","_componentFactoryResolver","_appRef","_defaultInjector","_document","parentNode","anchorNode","createComment","insertBefore","appendChild","replaceChild","componentRef","componentFactory","resolveComponentFactory","createComponent","length","destroy","create","attachView","hostView","detachView","_getComponentRootNode","viewContainer","viewRef","createEmbeddedView","detectChanges","rootNodes","forEach","rootNode","index","indexOf","remove","removeChild","CdkPortal","ɵfac","t","ɵdir","type","selectors","exportAs","features","CdkPortalOutlet","_viewContainerRef","_isInitialized","attached","_getRootNode","set","_attachedRef","ngOnInit","ngOnDestroy","ref","emit","clear","nodeType","ELEMENT_NODE","inputs","outputs","PortalHostDirective","apply","arguments","ɵPortalHostDirective_BaseFactory","provide","useExisting","PortalModule","ɵmod","ɵinj","factory","PortalInjector","_parentInjector","_customTokens","token","notFoundValue","value","nextId","CdkAccordion","_stateChanges","Subject","_openCloseAllActions","id","_multi","multi","openAll","_openCloseAll","closeAll","ngOnChanges","changes","next","complete","expanded","nextId$1","CdkAccordionItem","accordion","_changeDetectorRef","_expansionDispatcher","_openCloseAllSubscription","Subscription","EMPTY","closed","opened","destroyed","expandedChange","_expanded","_disabled","_removeUniqueSelectionListener","listen","accordionId","_subscribeToOpenCloseAllActions","notify","markForCheck","disabled","unsubscribe","toggle","close","open","subscribe","useValue","CdkAccordionModule","_c0","MatExpansionPanel_ng_template_5_Template","rf","ctx","_c1","_c2","_c3","a0","a1","collapsedHeight","expandedHeight","_c4","params","MatExpansionPanelHeader_span_4_Template","ctx_r46","_getExpandedState","_c5","_c6","MAT_ACCORDION","matExpansionAnimations","indicatorRotate","transform","expansionHeaderHeight","height","optional","bodyExpansion","visibility","MatExpansionPanelContent","_template","uniqueId","MAT_EXPANSION_PANEL_DEFAULT_OPTIONS","MatExpansionPanel","_uniqueSelectionDispatcher","_animationMode","defaultOptions","_hideToggle","afterExpand","afterCollapse","_inputChanges","_headerId","_bodyAnimationDone","pipe","distinctUntilChanged","x","y","fromState","toState","event","hideToggle","_togglePosition","togglePosition","_hasSpacing","displayMode","ngAfterContentInit","_lazyContent","startWith","filter","_portal","take","_containsFocus","_body","focusedElement","activeElement","bodyElement","contains","ɵcmp","contentQueries","dirIndex","_t","first","viewQuery","hostAttrs","hostVars","hostBindings","ngContentSelectors","decls","vars","consts","$event","directives","styles","encapsulation","data","animation","changeDetection","MatExpansionPanelHeader","panel","_element","_focusMonitor","_parentChangeSubscription","_animationsDisabled","accordionHideToggleChange","merge","focusVia","monitor","origin","_handleHeaderFocus","_animationStarted","_toggle","_isExpanded","_getPanelId","_getTogglePosition","_showToggle","_keydown","keyCode","preventDefault","_handleHeaderKeydown","focus","options","stopMonitoring","MatExpansionModule","imports","ExpandableSectionComponent","customElementComponent","ExpandableSectionModule"],"mappings":"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","file":"expandable-section-expandable-section-module.61ff7e566ca8bbf49892.js","sourcesContent":["import { __extends } from 'tslib';\nimport { ElementRef, Directive, TemplateRef, ViewContainerRef, EventEmitter, ComponentFactoryResolver, Inject, Output, NgModule } from '@angular/core';\nimport { DOCUMENT } from '@angular/common';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Throws an exception when attempting to attach a null portal to a host.\n * @docs-private\n */\nimport * as ɵngcc0 from '@angular/core';\nfunction throwNullPortalError() {\n    throw Error('Must provide a portal to attach');\n}\n/**\n * Throws an exception when attempting to attach a portal to a host that is already attached.\n * @docs-private\n */\nfunction throwPortalAlreadyAttachedError() {\n    throw Error('Host already has a portal attached');\n}\n/**\n * Throws an exception when attempting to attach a portal to an already-disposed host.\n * @docs-private\n */\nfunction throwPortalOutletAlreadyDisposedError() {\n    throw Error('This PortalOutlet has already been disposed');\n}\n/**\n * Throws an exception when attempting to attach an unknown portal type.\n * @docs-private\n */\nfunction throwUnknownPortalTypeError() {\n    throw Error('Attempting to attach an unknown Portal type. BasePortalOutlet accepts either ' +\n        'a ComponentPortal or a TemplatePortal.');\n}\n/**\n * Throws an exception when attempting to attach a portal to a null host.\n * @docs-private\n */\nfunction throwNullPortalOutletError() {\n    throw Error('Attempting to attach a portal to a null PortalOutlet');\n}\n/**\n * Throws an exception when attempting to detach a portal that is not attached.\n * @docs-private\n */\nfunction throwNoPortalAttachedError() {\n    throw Error('Attempting to detach a portal that is not attached to a host');\n}\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A `Portal` is something that you want to render somewhere else.\n * It can be attach to / detached from a `PortalOutlet`.\n */\nvar Portal = /** @class */ (function () {\n    function Portal() {\n    }\n    /** Attach this portal to a host. */\n    Portal.prototype.attach = function (host) {\n        if (host == null) {\n            throwNullPortalOutletError();\n        }\n        if (host.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        this._attachedHost = host;\n        return host.attach(this);\n    };\n    /** Detach this portal from its host */\n    Portal.prototype.detach = function () {\n        var host = this._attachedHost;\n        if (host == null) {\n            throwNoPortalAttachedError();\n        }\n        else {\n            this._attachedHost = null;\n            host.detach();\n        }\n    };\n    Object.defineProperty(Portal.prototype, \"isAttached\", {\n        /** Whether this portal is attached to a host. */\n        get: function () {\n            return this._attachedHost != null;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Sets the PortalOutlet reference without performing `attach()`. This is used directly by\n     * the PortalOutlet when it is performing an `attach()` or `detach()`.\n     */\n    Portal.prototype.setAttachedHost = function (host) {\n        this._attachedHost = host;\n    };\n    return Portal;\n}());\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nvar ComponentPortal = /** @class */ (function (_super) {\n    __extends(ComponentPortal, _super);\n    function ComponentPortal(component, viewContainerRef, injector, componentFactoryResolver) {\n        var _this = _super.call(this) || this;\n        _this.component = component;\n        _this.viewContainerRef = viewContainerRef;\n        _this.injector = injector;\n        _this.componentFactoryResolver = componentFactoryResolver;\n        return _this;\n    }\n    return ComponentPortal;\n}(Portal));\n/**\n * A `TemplatePortal` is a portal that represents some embedded template (TemplateRef).\n */\nvar TemplatePortal = /** @class */ (function (_super) {\n    __extends(TemplatePortal, _super);\n    function TemplatePortal(template, viewContainerRef, context) {\n        var _this = _super.call(this) || this;\n        _this.templateRef = template;\n        _this.viewContainerRef = viewContainerRef;\n        _this.context = context;\n        return _this;\n    }\n    Object.defineProperty(TemplatePortal.prototype, \"origin\", {\n        get: function () {\n            return this.templateRef.elementRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * Attach the portal to the provided `PortalOutlet`.\n     * When a context is provided it will override the `context` property of the `TemplatePortal`\n     * instance.\n     */\n    TemplatePortal.prototype.attach = function (host, context) {\n        if (context === void 0) { context = this.context; }\n        this.context = context;\n        return _super.prototype.attach.call(this, host);\n    };\n    TemplatePortal.prototype.detach = function () {\n        this.context = undefined;\n        return _super.prototype.detach.call(this);\n    };\n    return TemplatePortal;\n}(Portal));\n/**\n * A `DomPortal` is a portal whose DOM element will be taken from its current position\n * in the DOM and moved into a portal outlet, when it is attached. On detach, the content\n * will be restored to its original position.\n */\nvar DomPortal = /** @class */ (function (_super) {\n    __extends(DomPortal, _super);\n    function DomPortal(element) {\n        var _this = _super.call(this) || this;\n        _this.element = element instanceof ElementRef ? element.nativeElement : element;\n        return _this;\n    }\n    return DomPortal;\n}(Portal));\n/**\n * Partial implementation of PortalOutlet that handles attaching\n * ComponentPortal and TemplatePortal.\n */\nvar BasePortalOutlet = /** @class */ (function () {\n    function BasePortalOutlet() {\n        /** Whether this host has already been permanently disposed. */\n        this._isDisposed = false;\n        // @breaking-change 10.0.0 `attachDomPortal` to become a required abstract method.\n        this.attachDomPortal = null;\n    }\n    /** Whether this host has an attached portal. */\n    BasePortalOutlet.prototype.hasAttached = function () {\n        return !!this._attachedPortal;\n    };\n    /** Attaches a portal. */\n    BasePortalOutlet.prototype.attach = function (portal) {\n        if (!portal) {\n            throwNullPortalError();\n        }\n        if (this.hasAttached()) {\n            throwPortalAlreadyAttachedError();\n        }\n        if (this._isDisposed) {\n            throwPortalOutletAlreadyDisposedError();\n        }\n        if (portal instanceof ComponentPortal) {\n            this._attachedPortal = portal;\n            return this.attachComponentPortal(portal);\n        }\n        else if (portal instanceof TemplatePortal) {\n            this._attachedPortal = portal;\n            return this.attachTemplatePortal(portal);\n            // @breaking-change 10.0.0 remove null check for `this.attachDomPortal`.\n        }\n        else if (this.attachDomPortal && portal instanceof DomPortal) {\n            this._attachedPortal = portal;\n            return this.attachDomPortal(portal);\n        }\n        throwUnknownPortalTypeError();\n    };\n    /** Detaches a previously attached portal. */\n    BasePortalOutlet.prototype.detach = function () {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost(null);\n            this._attachedPortal = null;\n        }\n        this._invokeDisposeFn();\n    };\n    /** Permanently dispose of this portal host. */\n    BasePortalOutlet.prototype.dispose = function () {\n        if (this.hasAttached()) {\n            this.detach();\n        }\n        this._invokeDisposeFn();\n        this._isDisposed = true;\n    };\n    /** @docs-private */\n    BasePortalOutlet.prototype.setDisposeFn = function (fn) {\n        this._disposeFn = fn;\n    };\n    BasePortalOutlet.prototype._invokeDisposeFn = function () {\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = null;\n        }\n    };\n    return BasePortalOutlet;\n}());\n/**\n * @deprecated Use `BasePortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nvar BasePortalHost = /** @class */ (function (_super) {\n    __extends(BasePortalHost, _super);\n    function BasePortalHost() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return BasePortalHost;\n}(BasePortalOutlet));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * A PortalOutlet for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n */\nvar DomPortalOutlet = /** @class */ (function (_super) {\n    __extends(DomPortalOutlet, _super);\n    function DomPortalOutlet(\n    /** Element into which the content is projected. */\n    outletElement, _componentFactoryResolver, _appRef, _defaultInjector, \n    /**\n     * @deprecated `_document` Parameter to be made required.\n     * @breaking-change 10.0.0\n     */\n    _document) {\n        var _this = _super.call(this) || this;\n        _this.outletElement = outletElement;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._appRef = _appRef;\n        _this._defaultInjector = _defaultInjector;\n        /**\n         * Attaches a DOM portal by transferring its content into the outlet.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        _this.attachDomPortal = function (portal) {\n            // @breaking-change 10.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!_this._document) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            var element = portal.element;\n            if (!element.parentNode) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            var anchorNode = _this._document.createComment('dom-portal');\n            element.parentNode.insertBefore(anchorNode, element);\n            _this.outletElement.appendChild(element);\n            _super.prototype.setDisposeFn.call(_this, function () {\n                // We can't use `replaceWith` here because IE doesn't support it.\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        _this._document = _document;\n        return _this;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     * @returns Reference to the created component.\n     */\n    DomPortalOutlet.prototype.attachComponentPortal = function (portal) {\n        var _this = this;\n        var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        var componentFactory = resolver.resolveComponentFactory(portal.component);\n        var componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the view to the application.\n        if (portal.viewContainerRef) {\n            componentRef = portal.viewContainerRef.createComponent(componentFactory, portal.viewContainerRef.length, portal.injector || portal.viewContainerRef.injector);\n            this.setDisposeFn(function () { return componentRef.destroy(); });\n        }\n        else {\n            componentRef = componentFactory.create(portal.injector || this._defaultInjector);\n            this._appRef.attachView(componentRef.hostView);\n            this.setDisposeFn(function () {\n                _this._appRef.detachView(componentRef.hostView);\n                componentRef.destroy();\n            });\n        }\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        this.outletElement.appendChild(this._getComponentRootNode(componentRef));\n        return componentRef;\n    };\n    /**\n     * Attaches a template portal to the DOM as an embedded view.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    DomPortalOutlet.prototype.attachTemplatePortal = function (portal) {\n        var _this = this;\n        var viewContainer = portal.viewContainerRef;\n        var viewRef = viewContainer.createEmbeddedView(portal.templateRef, portal.context);\n        viewRef.detectChanges();\n        // The method `createEmbeddedView` will add the view as a child of the viewContainer.\n        // But for the DomPortalOutlet the view can be added everywhere in the DOM\n        // (e.g Overlay Container) To move the view to the specified host element. We just\n        // re-append the existing root nodes.\n        viewRef.rootNodes.forEach(function (rootNode) { return _this.outletElement.appendChild(rootNode); });\n        this.setDisposeFn((function () {\n            var index = viewContainer.indexOf(viewRef);\n            if (index !== -1) {\n                viewContainer.remove(index);\n            }\n        }));\n        // TODO(jelbourn): Return locals from view.\n        return viewRef;\n    };\n    /**\n     * Clears out a portal from the DOM.\n     */\n    DomPortalOutlet.prototype.dispose = function () {\n        _super.prototype.dispose.call(this);\n        if (this.outletElement.parentNode != null) {\n            this.outletElement.parentNode.removeChild(this.outletElement);\n        }\n    };\n    /** Gets the root HTMLElement for an instantiated component. */\n    DomPortalOutlet.prototype._getComponentRootNode = function (componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    };\n    return DomPortalOutlet;\n}(BasePortalOutlet));\n/**\n * @deprecated Use `DomPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nvar DomPortalHost = /** @class */ (function (_super) {\n    __extends(DomPortalHost, _super);\n    function DomPortalHost() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return DomPortalHost;\n}(DomPortalOutlet));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive version of a `TemplatePortal`. Because the directive *is* a TemplatePortal,\n * the directive instance itself can be attached to a host, enabling declarative use of portals.\n */\nvar CdkPortal = /** @class */ (function (_super) {\n    __extends(CdkPortal, _super);\n    function CdkPortal(templateRef, viewContainerRef) {\n        return _super.call(this, templateRef, viewContainerRef) || this;\n    }\n    /** @nocollapse */\n    CdkPortal.ctorParameters = function () { return [\n        { type: TemplateRef },\n        { type: ViewContainerRef }\n    ]; };\nCdkPortal.ɵfac = function CdkPortal_Factory(t) { return new (t || CdkPortal)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef)); };\nCdkPortal.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkPortal, selectors: [[\"\", \"cdkPortal\", \"\"]], exportAs: [\"cdkPortal\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkPortal, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortal]',\n                exportAs: 'cdkPortal'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }]; }, null); })();\n    return CdkPortal;\n}(TemplatePortal));\n/**\n * @deprecated Use `CdkPortal` instead.\n * @breaking-change 9.0.0\n */\nvar TemplatePortalDirective = /** @class */ (function (_super) {\n    __extends(TemplatePortalDirective, _super);\n    function TemplatePortalDirective() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\nTemplatePortalDirective.ɵfac = function TemplatePortalDirective_Factory(t) { return ɵTemplatePortalDirective_BaseFactory(t || TemplatePortalDirective); };\nTemplatePortalDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: TemplatePortalDirective, selectors: [[\"\", \"cdk-portal\", \"\"], [\"\", \"portal\", \"\"]], exportAs: [\"cdkPortal\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkPortal,\n                useExisting: TemplatePortalDirective\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nvar ɵTemplatePortalDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(TemplatePortalDirective);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(TemplatePortalDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdk-portal], [portal]',\n                exportAs: 'cdkPortal',\n                providers: [{\n                        provide: CdkPortal,\n                        useExisting: TemplatePortalDirective\n                    }]\n            }]\n    }], null, null); })();\n    return TemplatePortalDirective;\n}(CdkPortal));\n/**\n * Directive version of a PortalOutlet. Because the directive *is* a PortalOutlet, portals can be\n * directly attached to it, enabling declarative use.\n *\n * Usage:\n * `<ng-template [cdkPortalOutlet]=\"greeting\"></ng-template>`\n */\nvar CdkPortalOutlet = /** @class */ (function (_super) {\n    __extends(CdkPortalOutlet, _super);\n    function CdkPortalOutlet(_componentFactoryResolver, _viewContainerRef, \n    /**\n     * @deprecated `_document` parameter to be made required.\n     * @breaking-change 9.0.0\n     */\n    _document) {\n        var _this = _super.call(this) || this;\n        _this._componentFactoryResolver = _componentFactoryResolver;\n        _this._viewContainerRef = _viewContainerRef;\n        /** Whether the portal component is initialized. */\n        _this._isInitialized = false;\n        /** Emits when a portal is attached to the outlet. */\n        _this.attached = new EventEmitter();\n        /**\n         * Attaches the given DomPortal to this PortalHost by moving all of the portal content into it.\n         * @param portal Portal to be attached.\n         * @deprecated To be turned into a method.\n         * @breaking-change 10.0.0\n         */\n        _this.attachDomPortal = function (portal) {\n            // @breaking-change 9.0.0 Remove check and error once the\n            // `_document` constructor parameter is required.\n            if (!_this._document) {\n                throw Error('Cannot attach DOM portal without _document constructor parameter');\n            }\n            var element = portal.element;\n            if (!element.parentNode) {\n                throw Error('DOM portal content must be attached to a parent node.');\n            }\n            // Anchor used to save the element's previous position so\n            // that we can restore it when the portal is detached.\n            var anchorNode = _this._document.createComment('dom-portal');\n            portal.setAttachedHost(_this);\n            element.parentNode.insertBefore(anchorNode, element);\n            _this._getRootNode().appendChild(element);\n            _super.prototype.setDisposeFn.call(_this, function () {\n                if (anchorNode.parentNode) {\n                    anchorNode.parentNode.replaceChild(element, anchorNode);\n                }\n            });\n        };\n        _this._document = _document;\n        return _this;\n    }\n    Object.defineProperty(CdkPortalOutlet.prototype, \"portal\", {\n        /** Portal associated with the Portal outlet. */\n        get: function () {\n            return this._attachedPortal;\n        },\n        set: function (portal) {\n            // Ignore the cases where the `portal` is set to a falsy value before the lifecycle hooks have\n            // run. This handles the cases where the user might do something like `<div cdkPortalOutlet>`\n            // and attach a portal programmatically in the parent component. When Angular does the first CD\n            // round, it will fire the setter with empty string, causing the user's content to be cleared.\n            if (this.hasAttached() && !portal && !this._isInitialized) {\n                return;\n            }\n            if (this.hasAttached()) {\n                _super.prototype.detach.call(this);\n            }\n            if (portal) {\n                _super.prototype.attach.call(this, portal);\n            }\n            this._attachedPortal = portal;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkPortalOutlet.prototype, \"attachedRef\", {\n        /** Component or view reference that is attached to the portal. */\n        get: function () {\n            return this._attachedRef;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CdkPortalOutlet.prototype.ngOnInit = function () {\n        this._isInitialized = true;\n    };\n    CdkPortalOutlet.prototype.ngOnDestroy = function () {\n        _super.prototype.dispose.call(this);\n        this._attachedPortal = null;\n        this._attachedRef = null;\n    };\n    /**\n     * Attach the given ComponentPortal to this PortalOutlet using the ComponentFactoryResolver.\n     *\n     * @param portal Portal to be attached to the portal outlet.\n     * @returns Reference to the created component.\n     */\n    CdkPortalOutlet.prototype.attachComponentPortal = function (portal) {\n        portal.setAttachedHost(this);\n        // If the portal specifies an origin, use that as the logical location of the component\n        // in the application tree. Otherwise use the location of this PortalOutlet.\n        var viewContainerRef = portal.viewContainerRef != null ?\n            portal.viewContainerRef :\n            this._viewContainerRef;\n        var resolver = portal.componentFactoryResolver || this._componentFactoryResolver;\n        var componentFactory = resolver.resolveComponentFactory(portal.component);\n        var ref = viewContainerRef.createComponent(componentFactory, viewContainerRef.length, portal.injector || viewContainerRef.injector);\n        // If we're using a view container that's different from the injected one (e.g. when the portal\n        // specifies its own) we need to move the component into the outlet, otherwise it'll be rendered\n        // inside of the alternate view container.\n        if (viewContainerRef !== this._viewContainerRef) {\n            this._getRootNode().appendChild(ref.hostView.rootNodes[0]);\n        }\n        _super.prototype.setDisposeFn.call(this, function () { return ref.destroy(); });\n        this._attachedPortal = portal;\n        this._attachedRef = ref;\n        this.attached.emit(ref);\n        return ref;\n    };\n    /**\n     * Attach the given TemplatePortal to this PortalHost as an embedded View.\n     * @param portal Portal to be attached.\n     * @returns Reference to the created embedded view.\n     */\n    CdkPortalOutlet.prototype.attachTemplatePortal = function (portal) {\n        var _this = this;\n        portal.setAttachedHost(this);\n        var viewRef = this._viewContainerRef.createEmbeddedView(portal.templateRef, portal.context);\n        _super.prototype.setDisposeFn.call(this, function () { return _this._viewContainerRef.clear(); });\n        this._attachedPortal = portal;\n        this._attachedRef = viewRef;\n        this.attached.emit(viewRef);\n        return viewRef;\n    };\n    /** Gets the root node of the portal outlet. */\n    CdkPortalOutlet.prototype._getRootNode = function () {\n        var nativeElement = this._viewContainerRef.element.nativeElement;\n        // The directive could be set on a template which will result in a comment\n        // node being the root. Use the comment's parent node if that is the case.\n        return (nativeElement.nodeType === nativeElement.ELEMENT_NODE ?\n            nativeElement : nativeElement.parentNode);\n    };\n    /** @nocollapse */\n    CdkPortalOutlet.ctorParameters = function () { return [\n        { type: ComponentFactoryResolver },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }\n    ]; };\n    CdkPortalOutlet.propDecorators = {\n        attached: [{ type: Output }]\n    };\nCdkPortalOutlet.ɵfac = function CdkPortalOutlet_Factory(t) { return new (t || CdkPortalOutlet)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT)); };\nCdkPortalOutlet.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkPortalOutlet, selectors: [[\"\", \"cdkPortalOutlet\", \"\"]], inputs: { portal: [\"cdkPortalOutlet\", \"portal\"] }, outputs: { attached: \"attached\" }, exportAs: [\"cdkPortalOutlet\"], features: [ɵngcc0.ɵɵInheritDefinitionFeature] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkPortalOutlet, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalOutlet]',\n                exportAs: 'cdkPortalOutlet',\n                inputs: ['portal: cdkPortalOutlet']\n            }]\n    }], function () { return [{ type: ɵngcc0.ComponentFactoryResolver }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }]; }, { attached: [{\n            type: Output\n        }] }); })();\n    return CdkPortalOutlet;\n}(BasePortalOutlet));\n/**\n * @deprecated Use `CdkPortalOutlet` instead.\n * @breaking-change 9.0.0\n */\nvar PortalHostDirective = /** @class */ (function (_super) {\n    __extends(PortalHostDirective, _super);\n    function PortalHostDirective() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\nPortalHostDirective.ɵfac = function PortalHostDirective_Factory(t) { return ɵPortalHostDirective_BaseFactory(t || PortalHostDirective); };\nPortalHostDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: PortalHostDirective, selectors: [[\"\", \"cdkPortalHost\", \"\"], [\"\", \"portalHost\", \"\"]], inputs: { portal: [\"cdkPortalHost\", \"portal\"] }, exportAs: [\"cdkPortalHost\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: CdkPortalOutlet,\n                useExisting: PortalHostDirective\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nvar ɵPortalHostDirective_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(PortalHostDirective);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PortalHostDirective, [{\n        type: Directive,\n        args: [{\n                selector: '[cdkPortalHost], [portalHost]',\n                exportAs: 'cdkPortalHost',\n                inputs: ['portal: cdkPortalHost'],\n                providers: [{\n                        provide: CdkPortalOutlet,\n                        useExisting: PortalHostDirective\n                    }]\n            }]\n    }], null, null); })();\n    return PortalHostDirective;\n}(CdkPortalOutlet));\nvar PortalModule = /** @class */ (function () {\n    function PortalModule() {\n    }\nPortalModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: PortalModule });\nPortalModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function PortalModule_Factory(t) { return new (t || PortalModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(PortalModule, { declarations: [CdkPortal,\n        CdkPortalOutlet,\n        TemplatePortalDirective,\n        PortalHostDirective], exports: [CdkPortal,\n        CdkPortalOutlet,\n        TemplatePortalDirective,\n        PortalHostDirective] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PortalModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective],\n                declarations: [CdkPortal, CdkPortalOutlet, TemplatePortalDirective, PortalHostDirective]\n            }]\n    }], function () { return []; }, null); })();\n    return PortalModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Custom injector to be used when providing custom\n * injection tokens to components inside a portal.\n * @docs-private\n */\nvar PortalInjector = /** @class */ (function () {\n    function PortalInjector(_parentInjector, _customTokens) {\n        this._parentInjector = _parentInjector;\n        this._customTokens = _customTokens;\n    }\n    PortalInjector.prototype.get = function (token, notFoundValue) {\n        var value = this._customTokens.get(token);\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n        return this._parentInjector.get(token, notFoundValue);\n    };\n    return PortalInjector;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, BasePortalOutlet, CdkPortal, CdkPortalOutlet, ComponentPortal, DomPortal, DomPortalHost, DomPortalOutlet, Portal, PortalHostDirective, PortalInjector, PortalModule, TemplatePortal, TemplatePortalDirective };\n\n//# sourceMappingURL=portal.js.map","import { Directive, Input, EventEmitter, Optional, SkipSelf, ChangeDetectorRef, Output, NgModule } from '@angular/core';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { Subject, Subscription } from 'rxjs';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion. */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nvar nextId = 0;\n/**\n * Directive whose purpose is to manage the expanded state of CdkAccordionItem children.\n */\nvar CdkAccordion = /** @class */ (function () {\n    function CdkAccordion() {\n        /** Emits when the state of the accordion changes */\n        this._stateChanges = new Subject();\n        /** Stream that emits true/false when openAll/closeAll is triggered. */\n        this._openCloseAllActions = new Subject();\n        /** A readonly id value to use for unique selection coordination. */\n        this.id = \"cdk-accordion-\" + nextId++;\n        this._multi = false;\n    }\n    Object.defineProperty(CdkAccordion.prototype, \"multi\", {\n        /** Whether the accordion should allow multiple expanded accordion items simultaneously. */\n        get: function () { return this._multi; },\n        set: function (multi) { this._multi = coerceBooleanProperty(multi); },\n        enumerable: true,\n        configurable: true\n    });\n    /** Opens all enabled accordion items in an accordion where multi is enabled. */\n    CdkAccordion.prototype.openAll = function () {\n        this._openCloseAll(true);\n    };\n    /** Closes all enabled accordion items in an accordion where multi is enabled. */\n    CdkAccordion.prototype.closeAll = function () {\n        this._openCloseAll(false);\n    };\n    CdkAccordion.prototype.ngOnChanges = function (changes) {\n        this._stateChanges.next(changes);\n    };\n    CdkAccordion.prototype.ngOnDestroy = function () {\n        this._stateChanges.complete();\n    };\n    CdkAccordion.prototype._openCloseAll = function (expanded) {\n        if (this.multi) {\n            this._openCloseAllActions.next(expanded);\n        }\n    };\n    CdkAccordion.propDecorators = {\n        multi: [{ type: Input }]\n    };\nCdkAccordion.ɵfac = function CdkAccordion_Factory(t) { return new (t || CdkAccordion)(); };\nCdkAccordion.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAccordion, selectors: [[\"cdk-accordion\"], [\"\", \"cdkAccordion\", \"\"]], inputs: { multi: \"multi\" }, exportAs: [\"cdkAccordion\"], features: [ɵngcc0.ɵɵNgOnChangesFeature()] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAccordion, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion, [cdkAccordion]',\n                exportAs: 'cdkAccordion'\n            }]\n    }], function () { return []; }, { multi: [{\n            type: Input\n        }] }); })();\n    return CdkAccordion;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Used to generate unique ID for each accordion item. */\nvar nextId$1 = 0;\nvar ɵ0 = undefined;\n/**\n * An basic directive expected to be extended and decorated as a component.  Sets up all\n * events and attributes needed to be managed by a CdkAccordion parent.\n */\nvar CdkAccordionItem = /** @class */ (function () {\n    function CdkAccordionItem(accordion, _changeDetectorRef, _expansionDispatcher) {\n        var _this = this;\n        this.accordion = accordion;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._expansionDispatcher = _expansionDispatcher;\n        /** Subscription to openAll/closeAll events. */\n        this._openCloseAllSubscription = Subscription.EMPTY;\n        /** Event emitted every time the AccordionItem is closed. */\n        this.closed = new EventEmitter();\n        /** Event emitted every time the AccordionItem is opened. */\n        this.opened = new EventEmitter();\n        /** Event emitted when the AccordionItem is destroyed. */\n        this.destroyed = new EventEmitter();\n        /**\n         * Emits whenever the expanded state of the accordion changes.\n         * Primarily used to facilitate two-way binding.\n         * @docs-private\n         */\n        this.expandedChange = new EventEmitter();\n        /** The unique AccordionItem id. */\n        this.id = \"cdk-accordion-child-\" + nextId$1++;\n        this._expanded = false;\n        this._disabled = false;\n        /** Unregister function for _expansionDispatcher. */\n        this._removeUniqueSelectionListener = function () { };\n        this._removeUniqueSelectionListener =\n            _expansionDispatcher.listen(function (id, accordionId) {\n                if (_this.accordion && !_this.accordion.multi &&\n                    _this.accordion.id === accordionId && _this.id !== id) {\n                    _this.expanded = false;\n                }\n            });\n        // When an accordion item is hosted in an accordion, subscribe to open/close events.\n        if (this.accordion) {\n            this._openCloseAllSubscription = this._subscribeToOpenCloseAllActions();\n        }\n    }\n    Object.defineProperty(CdkAccordionItem.prototype, \"expanded\", {\n        /** Whether the AccordionItem is expanded. */\n        get: function () { return this._expanded; },\n        set: function (expanded) {\n            expanded = coerceBooleanProperty(expanded);\n            // Only emit events and update the internal value if the value changes.\n            if (this._expanded !== expanded) {\n                this._expanded = expanded;\n                this.expandedChange.emit(expanded);\n                if (expanded) {\n                    this.opened.emit();\n                    /**\n                     * In the unique selection dispatcher, the id parameter is the id of the CdkAccordionItem,\n                     * the name value is the id of the accordion.\n                     */\n                    var accordionId = this.accordion ? this.accordion.id : this.id;\n                    this._expansionDispatcher.notify(this.id, accordionId);\n                }\n                else {\n                    this.closed.emit();\n                }\n                // Ensures that the animation will run when the value is set outside of an `@Input`.\n                // This includes cases like the open, close and toggle methods.\n                this._changeDetectorRef.markForCheck();\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(CdkAccordionItem.prototype, \"disabled\", {\n        /** Whether the AccordionItem is disabled. */\n        get: function () { return this._disabled; },\n        set: function (disabled) { this._disabled = coerceBooleanProperty(disabled); },\n        enumerable: true,\n        configurable: true\n    });\n    /** Emits an event for the accordion item being destroyed. */\n    CdkAccordionItem.prototype.ngOnDestroy = function () {\n        this.opened.complete();\n        this.closed.complete();\n        this.destroyed.emit();\n        this.destroyed.complete();\n        this._removeUniqueSelectionListener();\n        this._openCloseAllSubscription.unsubscribe();\n    };\n    /** Toggles the expanded state of the accordion item. */\n    CdkAccordionItem.prototype.toggle = function () {\n        if (!this.disabled) {\n            this.expanded = !this.expanded;\n        }\n    };\n    /** Sets the expanded state of the accordion item to false. */\n    CdkAccordionItem.prototype.close = function () {\n        if (!this.disabled) {\n            this.expanded = false;\n        }\n    };\n    /** Sets the expanded state of the accordion item to true. */\n    CdkAccordionItem.prototype.open = function () {\n        if (!this.disabled) {\n            this.expanded = true;\n        }\n    };\n    CdkAccordionItem.prototype._subscribeToOpenCloseAllActions = function () {\n        var _this = this;\n        return this.accordion._openCloseAllActions.subscribe(function (expanded) {\n            // Only change expanded state if item is enabled\n            if (!_this.disabled) {\n                _this.expanded = expanded;\n            }\n        });\n    };\n    /** @nocollapse */\n    CdkAccordionItem.ctorParameters = function () { return [\n        { type: CdkAccordion, decorators: [{ type: Optional }, { type: SkipSelf }] },\n        { type: ChangeDetectorRef },\n        { type: UniqueSelectionDispatcher }\n    ]; };\n    CdkAccordionItem.propDecorators = {\n        closed: [{ type: Output }],\n        opened: [{ type: Output }],\n        destroyed: [{ type: Output }],\n        expandedChange: [{ type: Output }],\n        expanded: [{ type: Input }],\n        disabled: [{ type: Input }]\n    };\nCdkAccordionItem.ɵfac = function CdkAccordionItem_Factory(t) { return new (t || CdkAccordionItem)(ɵngcc0.ɵɵdirectiveInject(CdkAccordion, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher)); };\nCdkAccordionItem.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: CdkAccordionItem, selectors: [[\"cdk-accordion-item\"], [\"\", \"cdkAccordionItem\", \"\"]], inputs: { expanded: \"expanded\", disabled: \"disabled\" }, outputs: { closed: \"closed\", opened: \"opened\", destroyed: \"destroyed\", expandedChange: \"expandedChange\" }, exportAs: [\"cdkAccordionItem\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n            // to the same accordion.\n            { provide: CdkAccordion, useValue: ɵ0 },\n        ])] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAccordionItem, [{\n        type: Directive,\n        args: [{\n                selector: 'cdk-accordion-item, [cdkAccordionItem]',\n                exportAs: 'cdkAccordionItem',\n                providers: [\n                    // Provide CdkAccordion as undefined to prevent nested accordion items from registering\n                    // to the same accordion.\n                    { provide: CdkAccordion, useValue: ɵ0 },\n                ]\n            }]\n    }], function () { return [{ type: CdkAccordion, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UniqueSelectionDispatcher }]; }, { closed: [{\n            type: Output\n        }], opened: [{\n            type: Output\n        }], destroyed: [{\n            type: Output\n        }], expandedChange: [{\n            type: Output\n        }], expanded: [{\n            type: Input\n        }], disabled: [{\n            type: Input\n        }] }); })();\n    return CdkAccordionItem;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar CdkAccordionModule = /** @class */ (function () {\n    function CdkAccordionModule() {\n    }\nCdkAccordionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: CdkAccordionModule });\nCdkAccordionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function CdkAccordionModule_Factory(t) { return new (t || CdkAccordionModule)(); } });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkAccordionModule, { declarations: [CdkAccordion,\n        CdkAccordionItem], exports: [CdkAccordion,\n        CdkAccordionItem] }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CdkAccordionModule, [{\n        type: NgModule,\n        args: [{\n                exports: [CdkAccordion, CdkAccordionItem],\n                declarations: [CdkAccordion, CdkAccordionItem]\n            }]\n    }], function () { return []; }, null); })();\n    return CdkAccordionModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CdkAccordion, CdkAccordionItem, CdkAccordionModule };\n\n//# sourceMappingURL=accordion.js.map","import { CdkAccordionItem, CdkAccordion, CdkAccordionModule } from '@angular/cdk/accordion';\nimport { TemplatePortal, PortalModule } from '@angular/cdk/portal';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { InjectionToken, Directive, TemplateRef, EventEmitter, Component, ViewEncapsulation, ChangeDetectionStrategy, Optional, SkipSelf, Inject, ChangeDetectorRef, ViewContainerRef, Input, Output, ContentChild, ViewChild, Host, ElementRef, QueryList, ContentChildren, NgModule } from '@angular/core';\nimport { __extends } from 'tslib';\nimport { coerceBooleanProperty } from '@angular/cdk/coercion';\nimport { FocusMonitor, FocusKeyManager } from '@angular/cdk/a11y';\nimport { ENTER, hasModifierKey, SPACE, HOME, END } from '@angular/cdk/keycodes';\nimport { distinctUntilChanged, startWith, filter, take } from 'rxjs/operators';\nimport { Subject, Subscription, EMPTY, merge } from 'rxjs';\nimport { trigger, state, style, transition, animate, group, query, animateChild } from '@angular/animations';\nimport { UniqueSelectionDispatcher } from '@angular/cdk/collections';\nimport { ANIMATION_MODULE_TYPE } from '@angular/platform-browser/animations';\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Token used to provide a `MatAccordion` to `MatExpansionPanel`.\n * Used primarily to avoid circular imports between `MatAccordion` and `MatExpansionPanel`.\n */\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/cdk/collections';\nimport * as ɵngcc2 from '@angular/cdk/portal';\nimport * as ɵngcc3 from '@angular/cdk/a11y';\nimport * as ɵngcc4 from '@angular/common';\n\nvar _c0 = [\"body\"];\nfunction MatExpansionPanel_ng_template_5_Template(rf, ctx) { }\nvar _c1 = [[[\"mat-expansion-panel-header\"]], \"*\", [[\"mat-action-row\"]]];\nvar _c2 = [\"mat-expansion-panel-header\", \"*\", \"mat-action-row\"];\nvar _c3 = function (a0, a1) { return { collapsedHeight: a0, expandedHeight: a1 }; };\nvar _c4 = function (a0, a1) { return { value: a0, params: a1 }; };\nfunction MatExpansionPanelHeader_span_4_Template(rf, ctx) { if (rf & 1) {\n    ɵngcc0.ɵɵelement(0, \"span\", 2);\n} if (rf & 2) {\n    var ctx_r46 = ɵngcc0.ɵɵnextContext();\n    ɵngcc0.ɵɵproperty(\"@indicatorRotate\", ctx_r46._getExpandedState());\n} }\nvar _c5 = [[[\"mat-panel-title\"]], [[\"mat-panel-description\"]], \"*\"];\nvar _c6 = [\"mat-panel-title\", \"mat-panel-description\", \"*\"];\nvar MAT_ACCORDION = new InjectionToken('MAT_ACCORDION');\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Time and timing curve for expansion panel animations. */\nvar EXPANSION_PANEL_ANIMATION_TIMING = '225ms cubic-bezier(0.4,0.0,0.2,1)';\n/**\n * Animations used by the Material expansion panel.\n *\n * A bug in angular animation's `state` when ViewContainers are moved using ViewContainerRef.move()\n * causes the animation state of moved components to become `void` upon exit, and not update again\n * upon reentry into the DOM.  This can lead a to situation for the expansion panel where the state\n * of the panel is `expanded` or `collapsed` but the animation state is `void`.\n *\n * To correctly handle animating to the next state, we animate between `void` and `collapsed` which\n * are defined to have the same styles. Since angular animates from the current styles to the\n * destination state's style definition, in situations where we are moving from `void`'s styles to\n * `collapsed` this acts a noop since no style values change.\n *\n * In the case where angular's animation state is out of sync with the expansion panel's state, the\n * expansion panel being `expanded` and angular animations being `void`, the animation from the\n * `expanded`'s effective styles (though in a `void` animation state) to the collapsed state will\n * occur as expected.\n *\n * Angular Bug: https://github.com/angular/angular/issues/18847\n *\n * @docs-private\n */\nvar matExpansionAnimations = {\n    /** Animation that rotates the indicator arrow. */\n    indicatorRotate: trigger('indicatorRotate', [\n        state('collapsed, void', style({ transform: 'rotate(0deg)' })),\n        state('expanded', style({ transform: 'rotate(180deg)' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ]),\n    /** Animation that expands and collapses the panel header height. */\n    expansionHeaderHeight: trigger('expansionHeight', [\n        state('collapsed, void', style({\n            height: '{{collapsedHeight}}',\n        }), {\n            params: { collapsedHeight: '48px' },\n        }),\n        state('expanded', style({\n            height: '{{expandedHeight}}'\n        }), {\n            params: { expandedHeight: '64px' }\n        }),\n        transition('expanded <=> collapsed, void => collapsed', group([\n            query('@indicatorRotate', animateChild(), { optional: true }),\n            animate(EXPANSION_PANEL_ANIMATION_TIMING),\n        ])),\n    ]),\n    /** Animation that expands and collapses the panel content. */\n    bodyExpansion: trigger('bodyExpansion', [\n        state('collapsed, void', style({ height: '0px', visibility: 'hidden' })),\n        state('expanded', style({ height: '*', visibility: 'visible' })),\n        transition('expanded <=> collapsed, void => collapsed', animate(EXPANSION_PANEL_ANIMATION_TIMING)),\n    ])\n};\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Expansion panel content that will be rendered lazily\n * after the panel is opened for the first time.\n */\nvar MatExpansionPanelContent = /** @class */ (function () {\n    function MatExpansionPanelContent(_template) {\n        this._template = _template;\n    }\n    /** @nocollapse */\n    MatExpansionPanelContent.ctorParameters = function () { return [\n        { type: TemplateRef }\n    ]; };\nMatExpansionPanelContent.ɵfac = function MatExpansionPanelContent_Factory(t) { return new (t || MatExpansionPanelContent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef)); };\nMatExpansionPanelContent.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelContent, selectors: [[\"ng-template\", \"matExpansionPanelContent\", \"\"]] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelContent, [{\n        type: Directive,\n        args: [{\n                selector: 'ng-template[matExpansionPanelContent]'\n            }]\n    }], function () { return [{ type: ɵngcc0.TemplateRef }]; }, null); })();\n    return MatExpansionPanelContent;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/** Counter for generating unique element ids. */\nvar uniqueId = 0;\n/**\n * Injection token that can be used to configure the defalt\n * options for the expansion panel component.\n */\nvar MAT_EXPANSION_PANEL_DEFAULT_OPTIONS = new InjectionToken('MAT_EXPANSION_PANEL_DEFAULT_OPTIONS');\nvar ɵ0 = undefined;\n/**\n * `<mat-expansion-panel>`\n *\n * This component can be used as a single element to show expandable content, or as one of\n * multiple children of an element with the MatAccordion directive attached.\n */\nvar MatExpansionPanel = /** @class */ (function (_super) {\n    __extends(MatExpansionPanel, _super);\n    function MatExpansionPanel(accordion, _changeDetectorRef, _uniqueSelectionDispatcher, _viewContainerRef, _document, _animationMode, defaultOptions) {\n        var _this = _super.call(this, accordion, _changeDetectorRef, _uniqueSelectionDispatcher) || this;\n        _this._viewContainerRef = _viewContainerRef;\n        _this._animationMode = _animationMode;\n        _this._hideToggle = false;\n        /** An event emitted after the body's expansion animation happens. */\n        _this.afterExpand = new EventEmitter();\n        /** An event emitted after the body's collapse animation happens. */\n        _this.afterCollapse = new EventEmitter();\n        /** Stream that emits for changes in `@Input` properties. */\n        _this._inputChanges = new Subject();\n        /** ID for the associated header element. Used for a11y labelling. */\n        _this._headerId = \"mat-expansion-panel-header-\" + uniqueId++;\n        /** Stream of body animation done events. */\n        _this._bodyAnimationDone = new Subject();\n        _this.accordion = accordion;\n        _this._document = _document;\n        // We need a Subject with distinctUntilChanged, because the `done` event\n        // fires twice on some browsers. See https://github.com/angular/angular/issues/24084\n        _this._bodyAnimationDone.pipe(distinctUntilChanged(function (x, y) {\n            return x.fromState === y.fromState && x.toState === y.toState;\n        })).subscribe(function (event) {\n            if (event.fromState !== 'void') {\n                if (event.toState === 'expanded') {\n                    _this.afterExpand.emit();\n                }\n                else if (event.toState === 'collapsed') {\n                    _this.afterCollapse.emit();\n                }\n            }\n        });\n        if (defaultOptions) {\n            _this.hideToggle = defaultOptions.hideToggle;\n        }\n        return _this;\n    }\n    Object.defineProperty(MatExpansionPanel.prototype, \"hideToggle\", {\n        /** Whether the toggle indicator should be hidden. */\n        get: function () {\n            return this._hideToggle || (this.accordion && this.accordion.hideToggle);\n        },\n        set: function (value) {\n            this._hideToggle = coerceBooleanProperty(value);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MatExpansionPanel.prototype, \"togglePosition\", {\n        /** The position of the expansion indicator. */\n        get: function () {\n            return this._togglePosition || (this.accordion && this.accordion.togglePosition);\n        },\n        set: function (value) {\n            this._togglePosition = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Determines whether the expansion panel should have spacing between it and its siblings. */\n    MatExpansionPanel.prototype._hasSpacing = function () {\n        if (this.accordion) {\n            return this.expanded && this.accordion.displayMode === 'default';\n        }\n        return false;\n    };\n    /** Gets the expanded state string. */\n    MatExpansionPanel.prototype._getExpandedState = function () {\n        return this.expanded ? 'expanded' : 'collapsed';\n    };\n    /** Toggles the expanded state of the expansion panel. */\n    MatExpansionPanel.prototype.toggle = function () {\n        this.expanded = !this.expanded;\n    };\n    /** Sets the expanded state of the expansion panel to false. */\n    MatExpansionPanel.prototype.close = function () {\n        this.expanded = false;\n    };\n    /** Sets the expanded state of the expansion panel to true. */\n    MatExpansionPanel.prototype.open = function () {\n        this.expanded = true;\n    };\n    MatExpansionPanel.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        if (this._lazyContent) {\n            // Render the content as soon as the panel becomes open.\n            this.opened.pipe(startWith(null), filter(function () { return _this.expanded && !_this._portal; }), take(1)).subscribe(function () {\n                _this._portal = new TemplatePortal(_this._lazyContent._template, _this._viewContainerRef);\n            });\n        }\n    };\n    MatExpansionPanel.prototype.ngOnChanges = function (changes) {\n        this._inputChanges.next(changes);\n    };\n    MatExpansionPanel.prototype.ngOnDestroy = function () {\n        _super.prototype.ngOnDestroy.call(this);\n        this._bodyAnimationDone.complete();\n        this._inputChanges.complete();\n    };\n    /** Checks whether the expansion panel's content contains the currently-focused element. */\n    MatExpansionPanel.prototype._containsFocus = function () {\n        if (this._body) {\n            var focusedElement = this._document.activeElement;\n            var bodyElement = this._body.nativeElement;\n            return focusedElement === bodyElement || bodyElement.contains(focusedElement);\n        }\n        return false;\n    };\n    /** @nocollapse */\n    MatExpansionPanel.ctorParameters = function () { return [\n        { type: undefined, decorators: [{ type: Optional }, { type: SkipSelf }, { type: Inject, args: [MAT_ACCORDION,] }] },\n        { type: ChangeDetectorRef },\n        { type: UniqueSelectionDispatcher },\n        { type: ViewContainerRef },\n        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] },\n        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [ANIMATION_MODULE_TYPE,] }] },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] }\n    ]; };\n    MatExpansionPanel.propDecorators = {\n        hideToggle: [{ type: Input }],\n        togglePosition: [{ type: Input }],\n        afterExpand: [{ type: Output }],\n        afterCollapse: [{ type: Output }],\n        _lazyContent: [{ type: ContentChild, args: [MatExpansionPanelContent,] }],\n        _body: [{ type: ViewChild, args: ['body',] }]\n    };\nMatExpansionPanel.ɵfac = function MatExpansionPanel_Factory(t) { return new (t || MatExpansionPanel)(ɵngcc0.ɵɵdirectiveInject(MAT_ACCORDION, 12), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.UniqueSelectionDispatcher), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(DOCUMENT), ɵngcc0.ɵɵdirectiveInject(ANIMATION_MODULE_TYPE, 8), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8)); };\nMatExpansionPanel.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatExpansionPanel, selectors: [[\"mat-expansion-panel\"]], contentQueries: function MatExpansionPanel_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelContent, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._lazyContent = _t.first);\n    } }, viewQuery: function MatExpansionPanel_Query(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵviewQuery(_c0, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._body = _t.first);\n    } }, hostAttrs: [1, \"mat-expansion-panel\"], hostVars: 6, hostBindings: function MatExpansionPanel_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx.expanded)(\"_mat-animation-noopable\", ctx._animationMode === \"NoopAnimations\")(\"mat-expansion-panel-spacing\", ctx._hasSpacing());\n    } }, inputs: { disabled: \"disabled\", expanded: \"expanded\", hideToggle: \"hideToggle\", togglePosition: \"togglePosition\" }, outputs: { opened: \"opened\", closed: \"closed\", expandedChange: \"expandedChange\", afterExpand: \"afterExpand\", afterCollapse: \"afterCollapse\" }, exportAs: [\"matExpansionPanel\"], features: [ɵngcc0.ɵɵProvidersFeature([\n            // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n            // to the same accordion.\n            { provide: MAT_ACCORDION, useValue: ɵ0 },\n        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature()], ngContentSelectors: _c2, decls: 7, vars: 4, consts: [[\"role\", \"region\", 1, \"mat-expansion-panel-content\", 3, \"id\"], [\"body\", \"\"], [1, \"mat-expansion-panel-body\"], [3, \"cdkPortalOutlet\"]], template: function MatExpansionPanel_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c1);\n        ɵngcc0.ɵɵprojection(0);\n        ɵngcc0.ɵɵelementStart(1, \"div\", 0, 1);\n        ɵngcc0.ɵɵlistener(\"@bodyExpansion.done\", function MatExpansionPanel_Template_div_animation_bodyExpansion_done_1_listener($event) { return ctx._bodyAnimationDone.next($event); });\n        ɵngcc0.ɵɵelementStart(3, \"div\", 2);\n        ɵngcc0.ɵɵprojection(4, 1);\n        ɵngcc0.ɵɵtemplate(5, MatExpansionPanel_ng_template_5_Template, 0, 0, \"ng-template\", 3);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵprojection(6, 2);\n        ɵngcc0.ɵɵelementEnd();\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(1);\n        ɵngcc0.ɵɵproperty(\"@bodyExpansion\", ctx._getExpandedState())(\"id\", ctx.id);\n        ɵngcc0.ɵɵattribute(\"aria-labelledby\", ctx._headerId);\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"cdkPortalOutlet\", ctx._portal);\n    } }, directives: [ɵngcc2.CdkPortalOutlet], styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base{margin-left:0;margin-right:8px}\\n\"], encapsulation: 2, data: { animation: [matExpansionAnimations.bodyExpansion] }, changeDetection: 0 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanel, [{\n        type: Component,\n        args: [{\n                selector: 'mat-expansion-panel',\n                exportAs: 'matExpansionPanel',\n                template: \"<ng-content select=\\\"mat-expansion-panel-header\\\"></ng-content>\\n<div class=\\\"mat-expansion-panel-content\\\"\\n     role=\\\"region\\\"\\n     [@bodyExpansion]=\\\"_getExpandedState()\\\"\\n     (@bodyExpansion.done)=\\\"_bodyAnimationDone.next($event)\\\"\\n     [attr.aria-labelledby]=\\\"_headerId\\\"\\n     [id]=\\\"id\\\"\\n     #body>\\n  <div class=\\\"mat-expansion-panel-body\\\">\\n    <ng-content></ng-content>\\n    <ng-template [cdkPortalOutlet]=\\\"_portal\\\"></ng-template>\\n  </div>\\n  <ng-content select=\\\"mat-action-row\\\"></ng-content>\\n</div>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                inputs: ['disabled', 'expanded'],\n                outputs: ['opened', 'closed', 'expandedChange'],\n                animations: [matExpansionAnimations.bodyExpansion],\n                providers: [\n                    // Provide MatAccordion as undefined to prevent nested expansion panels from registering\n                    // to the same accordion.\n                    { provide: MAT_ACCORDION, useValue: ɵ0 },\n                ],\n                host: {\n                    'class': 'mat-expansion-panel',\n                    '[class.mat-expanded]': 'expanded',\n                    '[class._mat-animation-noopable]': '_animationMode === \"NoopAnimations\"',\n                    '[class.mat-expansion-panel-spacing]': '_hasSpacing()'\n                },\n                styles: [\".mat-expansion-panel{box-sizing:content-box;display:block;margin:0;border-radius:4px;overflow:hidden;transition:margin 225ms cubic-bezier(0.4, 0, 0.2, 1),box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mat-accordion .mat-expansion-panel:not(.mat-expanded),.mat-accordion .mat-expansion-panel:not(.mat-expansion-panel-spacing){border-radius:0}.mat-accordion .mat-expansion-panel:first-of-type{border-top-right-radius:4px;border-top-left-radius:4px}.mat-accordion .mat-expansion-panel:last-of-type{border-bottom-right-radius:4px;border-bottom-left-radius:4px}.cdk-high-contrast-active .mat-expansion-panel{outline:solid 1px}.mat-expansion-panel.ng-animate-disabled,.ng-animate-disabled .mat-expansion-panel,.mat-expansion-panel._mat-animation-noopable{transition:none}.mat-expansion-panel-content{display:flex;flex-direction:column;overflow:visible}.mat-expansion-panel-body{padding:0 24px 16px}.mat-expansion-panel-spacing{margin:16px 0}.mat-accordion>.mat-expansion-panel-spacing:first-child,.mat-accordion>*:first-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-top:0}.mat-accordion>.mat-expansion-panel-spacing:last-child,.mat-accordion>*:last-child:not(.mat-expansion-panel) .mat-expansion-panel-spacing{margin-bottom:0}.mat-action-row{border-top-style:solid;border-top-width:1px;display:flex;flex-direction:row;justify-content:flex-end;padding:16px 8px 16px 24px}.mat-action-row button.mat-button-base{margin-left:8px}[dir=rtl] .mat-action-row button.mat-button-base{margin-left:0;margin-right:8px}\\n\"]\n            }]\n    }], function () { return [{ type: undefined, decorators: [{\n                type: Optional\n            }, {\n                type: SkipSelf\n            }, {\n                type: Inject,\n                args: [MAT_ACCORDION]\n            }] }, { type: ɵngcc0.ChangeDetectorRef }, { type: ɵngcc1.UniqueSelectionDispatcher }, { type: ɵngcc0.ViewContainerRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [DOCUMENT]\n            }] }, { type: String, decorators: [{\n                type: Optional\n            }, {\n                type: Inject,\n                args: [ANIMATION_MODULE_TYPE]\n            }] }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n            }, {\n                type: Optional\n            }] }]; }, { hideToggle: [{\n            type: Input\n        }], togglePosition: [{\n            type: Input\n        }], afterExpand: [{\n            type: Output\n        }], afterCollapse: [{\n            type: Output\n        }], _lazyContent: [{\n            type: ContentChild,\n            args: [MatExpansionPanelContent]\n        }], _body: [{\n            type: ViewChild,\n            args: ['body']\n        }] }); })();\n    return MatExpansionPanel;\n}(CdkAccordionItem));\nvar MatExpansionPanelActionRow = /** @class */ (function () {\n    function MatExpansionPanelActionRow() {\n    }\nMatExpansionPanelActionRow.ɵfac = function MatExpansionPanelActionRow_Factory(t) { return new (t || MatExpansionPanelActionRow)(); };\nMatExpansionPanelActionRow.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelActionRow, selectors: [[\"mat-action-row\"]], hostAttrs: [1, \"mat-action-row\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelActionRow, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-action-row',\n                host: {\n                    class: 'mat-action-row'\n                }\n            }]\n    }], function () { return []; }, null); })();\n    return MatExpansionPanelActionRow;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * `<mat-expansion-panel-header>`\n *\n * This component corresponds to the header element of an `<mat-expansion-panel>`.\n */\nvar MatExpansionPanelHeader = /** @class */ (function () {\n    function MatExpansionPanelHeader(panel, _element, _focusMonitor, _changeDetectorRef, defaultOptions) {\n        var _this = this;\n        this.panel = panel;\n        this._element = _element;\n        this._focusMonitor = _focusMonitor;\n        this._changeDetectorRef = _changeDetectorRef;\n        this._parentChangeSubscription = Subscription.EMPTY;\n        /** Whether Angular animations in the panel header should be disabled. */\n        this._animationsDisabled = true;\n        var accordionHideToggleChange = panel.accordion ?\n            panel.accordion._stateChanges.pipe(filter(function (changes) { return !!(changes['hideToggle'] || changes['togglePosition']); })) :\n            EMPTY;\n        // Since the toggle state depends on an @Input on the panel, we\n        // need to subscribe and trigger change detection manually.\n        this._parentChangeSubscription =\n            merge(panel.opened, panel.closed, accordionHideToggleChange, panel._inputChanges.pipe(filter(function (changes) {\n                return !!(changes['hideToggle'] ||\n                    changes['disabled'] ||\n                    changes['togglePosition']);\n            })))\n                .subscribe(function () { return _this._changeDetectorRef.markForCheck(); });\n        // Avoids focus being lost if the panel contained the focused element and was closed.\n        panel.closed\n            .pipe(filter(function () { return panel._containsFocus(); }))\n            .subscribe(function () { return _focusMonitor.focusVia(_element, 'program'); });\n        _focusMonitor.monitor(_element).subscribe(function (origin) {\n            if (origin && panel.accordion) {\n                panel.accordion._handleHeaderFocus(_this);\n            }\n        });\n        if (defaultOptions) {\n            this.expandedHeight = defaultOptions.expandedHeight;\n            this.collapsedHeight = defaultOptions.collapsedHeight;\n        }\n    }\n    MatExpansionPanelHeader.prototype._animationStarted = function () {\n        // Currently the `expansionHeight` animation has a `void => collapsed` transition which is\n        // there to work around a bug in Angular (see #13088), however this introduces a different\n        // issue. The new transition will cause the header to animate in on init (see #16067), if the\n        // consumer has set a header height that is different from the default one. We work around it\n        // by disabling animations on the header and re-enabling them after the first animation has run.\n        // Note that Angular dispatches animation events even if animations are disabled. Ideally this\n        // wouldn't be necessary if we remove the `void => collapsed` transition, but we have to wait\n        // for https://github.com/angular/angular/issues/18847 to be resolved.\n        this._animationsDisabled = false;\n    };\n    Object.defineProperty(MatExpansionPanelHeader.prototype, \"disabled\", {\n        /**\n         * Whether the associated panel is disabled. Implemented as a part of `FocusableOption`.\n         * @docs-private\n         */\n        get: function () {\n            return this.panel.disabled;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /** Toggles the expanded state of the panel. */\n    MatExpansionPanelHeader.prototype._toggle = function () {\n        if (!this.disabled) {\n            this.panel.toggle();\n        }\n    };\n    /** Gets whether the panel is expanded. */\n    MatExpansionPanelHeader.prototype._isExpanded = function () {\n        return this.panel.expanded;\n    };\n    /** Gets the expanded state string of the panel. */\n    MatExpansionPanelHeader.prototype._getExpandedState = function () {\n        return this.panel._getExpandedState();\n    };\n    /** Gets the panel id. */\n    MatExpansionPanelHeader.prototype._getPanelId = function () {\n        return this.panel.id;\n    };\n    /** Gets the toggle position for the header. */\n    MatExpansionPanelHeader.prototype._getTogglePosition = function () {\n        return this.panel.togglePosition;\n    };\n    /** Gets whether the expand indicator should be shown. */\n    MatExpansionPanelHeader.prototype._showToggle = function () {\n        return !this.panel.hideToggle && !this.panel.disabled;\n    };\n    /** Handle keydown event calling to toggle() if appropriate. */\n    MatExpansionPanelHeader.prototype._keydown = function (event) {\n        switch (event.keyCode) {\n            // Toggle for space and enter keys.\n            case SPACE:\n            case ENTER:\n                if (!hasModifierKey(event)) {\n                    event.preventDefault();\n                    this._toggle();\n                }\n                break;\n            default:\n                if (this.panel.accordion) {\n                    this.panel.accordion._handleHeaderKeydown(event);\n                }\n                return;\n        }\n    };\n    /**\n     * Focuses the panel header. Implemented as a part of `FocusableOption`.\n     * @param origin Origin of the action that triggered the focus.\n     * @docs-private\n     */\n    MatExpansionPanelHeader.prototype.focus = function (origin, options) {\n        if (origin === void 0) { origin = 'program'; }\n        this._focusMonitor.focusVia(this._element, origin, options);\n    };\n    MatExpansionPanelHeader.prototype.ngOnDestroy = function () {\n        this._parentChangeSubscription.unsubscribe();\n        this._focusMonitor.stopMonitoring(this._element);\n    };\n    /** @nocollapse */\n    MatExpansionPanelHeader.ctorParameters = function () { return [\n        { type: MatExpansionPanel, decorators: [{ type: Host }] },\n        { type: ElementRef },\n        { type: FocusMonitor },\n        { type: ChangeDetectorRef },\n        { type: undefined, decorators: [{ type: Inject, args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS,] }, { type: Optional }] }\n    ]; };\n    MatExpansionPanelHeader.propDecorators = {\n        expandedHeight: [{ type: Input }],\n        collapsedHeight: [{ type: Input }]\n    };\nMatExpansionPanelHeader.ɵfac = function MatExpansionPanelHeader_Factory(t) { return new (t || MatExpansionPanelHeader)(ɵngcc0.ɵɵdirectiveInject(MatExpansionPanel, 1), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc3.FocusMonitor), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef), ɵngcc0.ɵɵdirectiveInject(MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, 8)); };\nMatExpansionPanelHeader.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MatExpansionPanelHeader, selectors: [[\"mat-expansion-panel-header\"]], hostAttrs: [\"role\", \"button\", 1, \"mat-expansion-panel-header\"], hostVars: 19, hostBindings: function MatExpansionPanelHeader_HostBindings(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵcomponentHostSyntheticListener(\"@expansionHeight.start\", function MatExpansionPanelHeader_animation_expansionHeight_start_HostBindingHandler($event) { return ctx._animationStarted(); });\n        ɵngcc0.ɵɵlistener(\"click\", function MatExpansionPanelHeader_click_HostBindingHandler($event) { return ctx._toggle(); })(\"keydown\", function MatExpansionPanelHeader_keydown_HostBindingHandler($event) { return ctx._keydown($event); });\n    } if (rf & 2) {\n        ɵngcc0.ɵɵattribute(\"id\", ctx.panel._headerId)(\"tabindex\", ctx.disabled ? 0 - 1 : 0)(\"aria-controls\", ctx._getPanelId())(\"aria-expanded\", ctx._isExpanded())(\"aria-disabled\", ctx.panel.disabled);\n        ɵngcc0.ɵɵupdateSyntheticHostBinding(\"@.disabled\", ctx._animationsDisabled)(\"@expansionHeight\", ɵngcc0.ɵɵpureFunction2(16, _c4, ctx._getExpandedState(), ɵngcc0.ɵɵpureFunction2(13, _c3, ctx.collapsedHeight, ctx.expandedHeight)));\n        ɵngcc0.ɵɵclassProp(\"mat-expanded\", ctx._isExpanded())(\"mat-expansion-toggle-indicator-after\", ctx._getTogglePosition() === \"after\")(\"mat-expansion-toggle-indicator-before\", ctx._getTogglePosition() === \"before\");\n    } }, inputs: { expandedHeight: \"expandedHeight\", collapsedHeight: \"collapsedHeight\" }, ngContentSelectors: _c6, decls: 5, vars: 1, consts: [[1, \"mat-content\"], [\"class\", \"mat-expansion-indicator\", 4, \"ngIf\"], [1, \"mat-expansion-indicator\"]], template: function MatExpansionPanelHeader_Template(rf, ctx) { if (rf & 1) {\n        ɵngcc0.ɵɵprojectionDef(_c5);\n        ɵngcc0.ɵɵelementStart(0, \"span\", 0);\n        ɵngcc0.ɵɵprojection(1);\n        ɵngcc0.ɵɵprojection(2, 1);\n        ɵngcc0.ɵɵprojection(3, 2);\n        ɵngcc0.ɵɵelementEnd();\n        ɵngcc0.ɵɵtemplate(4, MatExpansionPanelHeader_span_4_Template, 1, 1, \"span\", 1);\n    } if (rf & 2) {\n        ɵngcc0.ɵɵadvance(4);\n        ɵngcc0.ɵɵproperty(\"ngIf\", ctx._showToggle());\n    } }, directives: [ɵngcc4.NgIf], styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\\n\"], encapsulation: 2, data: { animation: [\n            matExpansionAnimations.indicatorRotate,\n            matExpansionAnimations.expansionHeaderHeight\n        ] }, changeDetection: 0 });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelHeader, [{\n        type: Component,\n        args: [{\n                selector: 'mat-expansion-panel-header',\n                template: \"<span class=\\\"mat-content\\\">\\n  <ng-content select=\\\"mat-panel-title\\\"></ng-content>\\n  <ng-content select=\\\"mat-panel-description\\\"></ng-content>\\n  <ng-content></ng-content>\\n</span>\\n<span [@indicatorRotate]=\\\"_getExpandedState()\\\" *ngIf=\\\"_showToggle()\\\"\\n      class=\\\"mat-expansion-indicator\\\"></span>\\n\",\n                encapsulation: ViewEncapsulation.None,\n                changeDetection: ChangeDetectionStrategy.OnPush,\n                animations: [\n                    matExpansionAnimations.indicatorRotate,\n                    matExpansionAnimations.expansionHeaderHeight\n                ],\n                host: {\n                    'class': 'mat-expansion-panel-header',\n                    'role': 'button',\n                    '[attr.id]': 'panel._headerId',\n                    '[attr.tabindex]': 'disabled ? -1 : 0',\n                    '[attr.aria-controls]': '_getPanelId()',\n                    '[attr.aria-expanded]': '_isExpanded()',\n                    '[attr.aria-disabled]': 'panel.disabled',\n                    '[class.mat-expanded]': '_isExpanded()',\n                    '[class.mat-expansion-toggle-indicator-after]': \"_getTogglePosition() === 'after'\",\n                    '[class.mat-expansion-toggle-indicator-before]': \"_getTogglePosition() === 'before'\",\n                    '(click)': '_toggle()',\n                    '(keydown)': '_keydown($event)',\n                    '[@.disabled]': '_animationsDisabled',\n                    '(@expansionHeight.start)': '_animationStarted()',\n                    '[@expansionHeight]': \"{\\n        value: _getExpandedState(),\\n        params: {\\n          collapsedHeight: collapsedHeight,\\n          expandedHeight: expandedHeight\\n        }\\n    }\"\n                },\n                styles: [\".mat-expansion-panel-header{display:flex;flex-direction:row;align-items:center;padding:0 24px;border-radius:inherit}.mat-expansion-panel-header:focus,.mat-expansion-panel-header:hover{outline:none}.mat-expansion-panel-header.mat-expanded:focus,.mat-expansion-panel-header.mat-expanded:hover{background:inherit}.mat-expansion-panel-header:not([aria-disabled=true]){cursor:pointer}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before{flex-direction:row-reverse}.mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 16px 0 0}[dir=rtl] .mat-expansion-panel-header.mat-expansion-toggle-indicator-before .mat-expansion-indicator{margin:0 0 0 16px}.mat-content{display:flex;flex:1;flex-direction:row;overflow:hidden}.mat-expansion-panel-header-title,.mat-expansion-panel-header-description{display:flex;flex-grow:1;margin-right:16px}[dir=rtl] .mat-expansion-panel-header-title,[dir=rtl] .mat-expansion-panel-header-description{margin-right:0;margin-left:16px}.mat-expansion-panel-header-description{flex-grow:2}.mat-expansion-indicator::after{border-style:solid;border-width:0 2px 2px 0;content:\\\"\\\";display:inline-block;padding:3px;transform:rotate(45deg);vertical-align:middle}\\n\"]\n            }]\n    }], function () { return [{ type: MatExpansionPanel, decorators: [{\n                type: Host\n            }] }, { type: ɵngcc0.ElementRef }, { type: ɵngcc3.FocusMonitor }, { type: ɵngcc0.ChangeDetectorRef }, { type: undefined, decorators: [{\n                type: Inject,\n                args: [MAT_EXPANSION_PANEL_DEFAULT_OPTIONS]\n            }, {\n                type: Optional\n            }] }]; }, { expandedHeight: [{\n            type: Input\n        }], collapsedHeight: [{\n            type: Input\n        }] }); })();\n    return MatExpansionPanelHeader;\n}());\n/**\n * `<mat-panel-description>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nvar MatExpansionPanelDescription = /** @class */ (function () {\n    function MatExpansionPanelDescription() {\n    }\nMatExpansionPanelDescription.ɵfac = function MatExpansionPanelDescription_Factory(t) { return new (t || MatExpansionPanelDescription)(); };\nMatExpansionPanelDescription.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelDescription, selectors: [[\"mat-panel-description\"]], hostAttrs: [1, \"mat-expansion-panel-header-description\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelDescription, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-panel-description',\n                host: {\n                    class: 'mat-expansion-panel-header-description'\n                }\n            }]\n    }], function () { return []; }, null); })();\n    return MatExpansionPanelDescription;\n}());\n/**\n * `<mat-panel-title>`\n *\n * This directive is to be used inside of the MatExpansionPanelHeader component.\n */\nvar MatExpansionPanelTitle = /** @class */ (function () {\n    function MatExpansionPanelTitle() {\n    }\nMatExpansionPanelTitle.ɵfac = function MatExpansionPanelTitle_Factory(t) { return new (t || MatExpansionPanelTitle)(); };\nMatExpansionPanelTitle.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatExpansionPanelTitle, selectors: [[\"mat-panel-title\"]], hostAttrs: [1, \"mat-expansion-panel-header-title\"] });\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionPanelTitle, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-panel-title',\n                host: {\n                    class: 'mat-expansion-panel-header-title'\n                }\n            }]\n    }], function () { return []; }, null); })();\n    return MatExpansionPanelTitle;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n/**\n * Directive for a Material Design Accordion.\n */\nvar MatAccordion = /** @class */ (function (_super) {\n    __extends(MatAccordion, _super);\n    function MatAccordion() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /** Headers belonging to this accordion. */\n        _this._ownHeaders = new QueryList();\n        _this._hideToggle = false;\n        /**\n         * Display mode used for all expansion panels in the accordion. Currently two display\n         * modes exist:\n         *  default - a gutter-like spacing is placed around any expanded panel, placing the expanded\n         *     panel at a different elevation from the rest of the accordion.\n         *  flat - no spacing is placed around expanded panels, showing all panels at the same\n         *     elevation.\n         */\n        _this.displayMode = 'default';\n        /** The position of the expansion indicator. */\n        _this.togglePosition = 'after';\n        return _this;\n    }\n    Object.defineProperty(MatAccordion.prototype, \"hideToggle\", {\n        /** Whether the expansion indicator should be hidden. */\n        get: function () { return this._hideToggle; },\n        set: function (show) { this._hideToggle = coerceBooleanProperty(show); },\n        enumerable: true,\n        configurable: true\n    });\n    MatAccordion.prototype.ngAfterContentInit = function () {\n        var _this = this;\n        this._headers.changes\n            .pipe(startWith(this._headers))\n            .subscribe(function (headers) {\n            _this._ownHeaders.reset(headers.filter(function (header) { return header.panel.accordion === _this; }));\n            _this._ownHeaders.notifyOnChanges();\n        });\n        this._keyManager = new FocusKeyManager(this._ownHeaders).withWrap();\n    };\n    /** Handles keyboard events coming in from the panel headers. */\n    MatAccordion.prototype._handleHeaderKeydown = function (event) {\n        var keyCode = event.keyCode;\n        var manager = this._keyManager;\n        if (keyCode === HOME) {\n            if (!hasModifierKey(event)) {\n                manager.setFirstItemActive();\n                event.preventDefault();\n            }\n        }\n        else if (keyCode === END) {\n            if (!hasModifierKey(event)) {\n                manager.setLastItemActive();\n                event.preventDefault();\n            }\n        }\n        else {\n            this._keyManager.onKeydown(event);\n        }\n    };\n    MatAccordion.prototype._handleHeaderFocus = function (header) {\n        this._keyManager.updateActiveItem(header);\n    };\n    MatAccordion.propDecorators = {\n        _headers: [{ type: ContentChildren, args: [MatExpansionPanelHeader, { descendants: true },] }],\n        hideToggle: [{ type: Input }],\n        displayMode: [{ type: Input }],\n        togglePosition: [{ type: Input }]\n    };\nMatAccordion.ɵfac = function MatAccordion_Factory(t) { return ɵMatAccordion_BaseFactory(t || MatAccordion); };\nMatAccordion.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MatAccordion, selectors: [[\"mat-accordion\"]], contentQueries: function MatAccordion_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {\n        ɵngcc0.ɵɵcontentQuery(dirIndex, MatExpansionPanelHeader, true);\n    } if (rf & 2) {\n        var _t;\n        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx._headers = _t);\n    } }, hostAttrs: [1, \"mat-accordion\"], hostVars: 2, hostBindings: function MatAccordion_HostBindings(rf, ctx) { if (rf & 2) {\n        ɵngcc0.ɵɵclassProp(\"mat-accordion-multi\", ctx.multi);\n    } }, inputs: { multi: \"multi\", hideToggle: \"hideToggle\", displayMode: \"displayMode\", togglePosition: \"togglePosition\" }, exportAs: [\"matAccordion\"], features: [ɵngcc0.ɵɵProvidersFeature([{\n                provide: MAT_ACCORDION,\n                useExisting: MatAccordion\n            }]), ɵngcc0.ɵɵInheritDefinitionFeature] });\nvar ɵMatAccordion_BaseFactory = ɵngcc0.ɵɵgetInheritedFactory(MatAccordion);\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatAccordion, [{\n        type: Directive,\n        args: [{\n                selector: 'mat-accordion',\n                exportAs: 'matAccordion',\n                inputs: ['multi'],\n                providers: [{\n                        provide: MAT_ACCORDION,\n                        useExisting: MatAccordion\n                    }],\n                host: {\n                    class: 'mat-accordion',\n                    // Class binding which is only used by the test harness as there is no other\n                    // way for the harness to detect if multiple panel support is enabled.\n                    '[class.mat-accordion-multi]': 'this.multi'\n                }\n            }]\n    }], null, { hideToggle: [{\n            type: Input\n        }], _headers: [{\n            type: ContentChildren,\n            args: [MatExpansionPanelHeader, { descendants: true }]\n        }], displayMode: [{\n            type: Input\n        }], togglePosition: [{\n            type: Input\n        }] }); })();\n    return MatAccordion;\n}(CdkAccordion));\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\nvar MatExpansionModule = /** @class */ (function () {\n    function MatExpansionModule() {\n    }\nMatExpansionModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: MatExpansionModule });\nMatExpansionModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function MatExpansionModule_Factory(t) { return new (t || MatExpansionModule)(); }, imports: [[CommonModule, CdkAccordionModule, PortalModule]] });\n(function () { (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(MatExpansionModule, { declarations: function () { return [MatAccordion,\n        MatExpansionPanel,\n        MatExpansionPanelActionRow,\n        MatExpansionPanelHeader,\n        MatExpansionPanelTitle,\n        MatExpansionPanelDescription,\n        MatExpansionPanelContent]; }, imports: function () { return [CommonModule, CdkAccordionModule, PortalModule]; }, exports: function () { return [MatAccordion,\n        MatExpansionPanel,\n        MatExpansionPanelActionRow,\n        MatExpansionPanelHeader,\n        MatExpansionPanelTitle,\n        MatExpansionPanelDescription,\n        MatExpansionPanelContent]; } }); })();\n/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MatExpansionModule, [{\n        type: NgModule,\n        args: [{\n                imports: [CommonModule, CdkAccordionModule, PortalModule],\n                exports: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ],\n                declarations: [\n                    MatAccordion,\n                    MatExpansionPanel,\n                    MatExpansionPanelActionRow,\n                    MatExpansionPanelHeader,\n                    MatExpansionPanelTitle,\n                    MatExpansionPanelDescription,\n                    MatExpansionPanelContent,\n                ]\n            }]\n    }], function () { return []; }, null); })();\n    return MatExpansionModule;\n}());\n\n/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { EXPANSION_PANEL_ANIMATION_TIMING, MAT_ACCORDION, MAT_EXPANSION_PANEL_DEFAULT_OPTIONS, MatAccordion, MatExpansionModule, MatExpansionPanel, MatExpansionPanelActionRow, MatExpansionPanelContent, MatExpansionPanelDescription, MatExpansionPanelHeader, MatExpansionPanelTitle, matExpansionAnimations, ɵ0 };\n\n//# sourceMappingURL=expansion.js.map","/* tslint:disable component-selector */\nimport {Component, Input} from '@angular/core';\n\n/** Custom element wrapper for the material expansion panel with a title input. */\n@Component({\n  selector: 'aio-expandable-section',\n  templateUrl: 'expandable-section.component.html',\n})\nexport class ExpandableSectionComponent {\n  @Input() title;\n}\n","<mat-expansion-panel style=\"background: inherit\">\n  <mat-expansion-panel-header>\n    {{title}}\n  </mat-expansion-panel-header>\n\n  <ng-content></ng-content>\n</mat-expansion-panel>\n","import { NgModule, Type } from '@angular/core';\nimport { ExpandableSectionComponent } from './expandable-section.component';\nimport { WithCustomElementComponent } from '../element-registry';\nimport { MatExpansionModule } from '@angular/material/expansion';\n\n@NgModule({\n  imports: [ MatExpansionModule ],\n  declarations: [ ExpandableSectionComponent, ],\n  entryComponents: [ ExpandableSectionComponent ]\n})\nexport class ExpandableSectionModule implements WithCustomElementComponent {\n  customElementComponent: Type<any> = ExpandableSectionComponent;\n}\n"],"sourceRoot":"webpack:///"}